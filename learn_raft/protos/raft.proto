syntax = "proto3";

package learn_raft;

//rpc
service Raft {
  rpc request_vote (RequestVote) returns (RequestVoteResponse) {}
  rpc append_entries (AppendEntries) returns (AppendEntriesResponse) {}
  rpc add_node (AddNode) returns (AddNodeResponse) {}
  rpc remove_node (RemoveNode) returns (RemoveNodeResponse) {}
  rpc get_state (GetState) returns (GetStateResponse) {}
  rpc start_election (StartElection) returns (StartElectionResponse) {}
  rpc install_snapshot (InstallSnapshot) returns (InstallSnapshotResponse) {}
  //TODO pre_vote
  //TODO snapshot
}

message RequestVote {
  optional uint32 server_id = 1;
  optional uint64 term = 2 ;
  optional uint64 last_log_term = 3;
  optional uint64 last_log_index = 4;
}

message RequestVoteResponse {
  optional uint32 server_id = 1;
  optional uint64 term = 2;
  optional uint32 voted_for = 3;
}

message AppendEntries {
  optional uint64 term = 1;
  optional uint32 leader_id = 2;
  optional uint64 prev_log_term = 3;
  optional uint64 prev_log_index = 4;
  optional uint64 leader_commit_index = 5;
  repeated LogEntry entries = 6;
}

message LogEntry {
  optional uint32 type = 1;
  optional uint64 term = 2;
  optional uint64 index = 3;
  optional bytes command = 4;
}

message AppendEntriesResponse {
  optional ResultCode result = 1;
  optional uint64 term = 2;
  optional uint64 last_log_index = 3;
}

enum ResultCode {
  RESULT_SUCCESS = 0;
  RESULT_FAILURE = 1;
}

message Server {
  optional uint32 id = 1;
  optional string host = 2;
  optional uint32 port = 3;
}

message AddNode {
  optional Server server = 1;
  optional string config = 2;
}

message AddNodeResponse {
  optional ResultCode result = 1;
}

message RemoveNode {
  optional uint32 id = 1;
}

message RemoveNodeResponse {
  optional ResultCode result = 1;
}

message GetState{
}

message GetStateResponse{
  optional Server server = 1;
  optional string cluster_manager_ip = 2;
  repeated LogEntry log = 3;
  optional uint64 term = 4;
  optional uint64 commit_index = 5;
  optional uint64 last_applied_index = 6;
  repeated Server peers = 7;
  optional uint32 voted_for = 8;
}

message StartElection{
}

message StartElectionResponse{
  optional ResultCode result = 1;
}

message InstallSnapshot{
}

message InstallSnapshotResponse{
  optional ResultCode result = 1;
}