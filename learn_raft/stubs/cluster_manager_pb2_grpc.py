# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import learn_raft.stubs.cluster_manager_pb2 as cluster__manager__pb2
import learn_raft.stubs.raft_pb2 as raft__pb2


class ClusterManagerStub(object):
    """rpc
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_node = channel.unary_unary(
                '/learn_raft.ClusterManager/add_node',
                request_serializer=raft__pb2.AddNode.SerializeToString,
                response_deserializer=raft__pb2.AddNodeResponse.FromString,
                )
        self.remove_node = channel.unary_unary(
                '/learn_raft.ClusterManager/remove_node',
                request_serializer=raft__pb2.RemoveNode.SerializeToString,
                response_deserializer=raft__pb2.RemoveNodeResponse.FromString,
                )
        self.get_nodes = channel.unary_unary(
                '/learn_raft.ClusterManager/get_nodes',
                request_serializer=cluster__manager__pb2.GetNode.SerializeToString,
                response_deserializer=cluster__manager__pb2.GetNodeResponse.FromString,
                )


class ClusterManagerServicer(object):
    """rpc
    """

    def add_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_node(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_nodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClusterManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add_node': grpc.unary_unary_rpc_method_handler(
                    servicer.add_node,
                    request_deserializer=raft__pb2.AddNode.FromString,
                    response_serializer=raft__pb2.AddNodeResponse.SerializeToString,
            ),
            'remove_node': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_node,
                    request_deserializer=raft__pb2.RemoveNode.FromString,
                    response_serializer=raft__pb2.RemoveNodeResponse.SerializeToString,
            ),
            'get_nodes': grpc.unary_unary_rpc_method_handler(
                    servicer.get_nodes,
                    request_deserializer=cluster__manager__pb2.GetNode.FromString,
                    response_serializer=cluster__manager__pb2.GetNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'learn_raft.ClusterManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClusterManager(object):
    """rpc
    """

    @staticmethod
    def add_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learn_raft.ClusterManager/add_node',
            raft__pb2.AddNode.SerializeToString,
            raft__pb2.AddNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_node(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learn_raft.ClusterManager/remove_node',
            raft__pb2.RemoveNode.SerializeToString,
            raft__pb2.RemoveNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_nodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/learn_raft.ClusterManager/get_nodes',
            cluster__manager__pb2.GetNode.SerializeToString,
            cluster__manager__pb2.GetNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
